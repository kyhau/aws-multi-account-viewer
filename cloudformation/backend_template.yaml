AWSTemplateFormatVersion: '2010-09-09'
Description: Create backend components for aws-multi-account-viewer.

Parameters:
  Accounts:
    Description: >
      Account Numbers for all your sub accounts and admin account separated by
      commas e.g '111111111111,2222222222222'
    Type: String
  ApiGatewayStageName:
    Description: Stage name of API Gateway
    Type: String
    AllowedPattern: ^[a-z0-9]+$
    Default: v1
  CognitoUserPoolArn:
    Description: ARN of the Cognito User Pool referenced by Authorizer
    Type: String
  CronTimer:
    Description: How often to update all services to DynamoDB table
    Type: String
    Default: "rate(2 hours)"
  CrossAccountAccessRole:
    Description: Role in all subaccounts that gets consumed
    Type: String
  LambdaBucketName:
    Description: Name of your S3 bucket that holds the lambda zip file
    Type: String
  LambdaExecutionRole:
    Description: Name of Lambda Execution Role
    Type: String
  LambdaPackage:
    Description: Name of lambda zip file including .zip e.g 'functions.zip'
    Type: String
  LogRetention:
    Description: Days to keep lambda logs
    Type: Number
    Default: 5  # in Days: 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653
  LogsBucketName:
    Description: Bucket name for the application logging
    Type: String
  TableName:
    Description: Name of DynamoDB table
    Type: String
  Regions:
    Description: >
      Regions you watched, minimum us-east-1 for global resources like IAM
    Type: String
    Default: 'ap-southeast-2,us-east-1'

Resources:
  LogsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref LogsBucketName
      AccessControl: LogDeliveryWrite
      LifecycleConfiguration:
        Rules:
          - Id: DeleteContentAfter14Days
            Status: Enabled
            ExpirationInDays: 14
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  LogsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref LogsBucket
      PolicyDocument:
        Statement:
          - Sid: Prevent Accidental Bucket Deletion
            Effect: Deny
            Principal: '*'
            Action: s3:DeleteBucket
            Resource:
              - !Sub 'arn:aws:s3:::${LogsBucket}'

  # DynamoDB Table
  DynamoMultiAccountTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref TableName
      BillingMode: PAY_PER_REQUEST
      SSESpecification:
        SSEEnabled: true
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      AttributeDefinitions:
        - AttributeName: Id
          AttributeType: S
        - AttributeName: EntryType
          AttributeType: S
      KeySchema:
        - AttributeName: Id
          KeyType: HASH
      GlobalSecondaryIndexes:
        -
          IndexName: "EntryType-index"
          KeySchema:
            - AttributeName: EntryType
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      Tags:
        -
          Key: Name
          Value: !Ref TableName

  # IAM Resources
  LambdaBackEndRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref LambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/ReadOnlyAccess
      Tags:
        -
          Key: Name
          Value: !Ref LambdaExecutionRole
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-LambdaDynamoDB"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:*
                Resource:
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TableName}"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TableName}/index/*"
        - PolicyName: !Sub "${AWS::StackName}-LambdaAssumeRole"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sts:AssumeRole
                Resource: !Sub "arn:aws:iam::*:role/${CrossAccountAccessRole}"
        - PolicyName: !Sub "${AWS::StackName}-Lambda-Source-Account-Policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - xray:Put*
                Resource: "*"
        - PolicyName: !Sub "${AWS::StackName}-LambdaSQS"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:SendMessage
                  - sqs:GetQueueAttributes
                  - sqs:ChangeMessageVisibility
                Resource:
                  - !GetAtt MyQueue.Arn
                  - !GetAtt ReceiverDeadLetterQueue.Arn

  # SQS Queue
  MyQueue:
    Type: AWS::SQS::Queue
    Properties:
      DelaySeconds: 0
      VisibilityTimeout: 180
      MessageRetentionPeriod: 3600  # 1 hour.
      RedrivePolicy:
        deadLetterTargetArn:
          "Fn::GetAtt":
            - ReceiverDeadLetterQueue
            - Arn
        maxReceiveCount: 1
      Tags:
        -
          Key: Name
          Value: !Sub "${AWS::StackName}-MainSQS"
  # Dead Letter
  ReceiverDeadLetterQueue:
    Type: "AWS::SQS::Queue"
    Properties:
      MessageRetentionPeriod: 3600  # 1 hour.
      Tags:
        -
          Key: Name
          Value: !Sub "${AWS::StackName}-DeadLetterSQS"

  LambdaFunctionEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      Enabled: true
      EventSourceArn: !GetAtt MyQueue.Arn
      FunctionName: !GetAtt LambdaReceiveSQSFunction.Arn

  # Lambda Functions
  LambdaSendSQSFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-SendFunction"
      Handler: send_sqs_message.lambda_handler
      Runtime: python3.7
      MemorySize: 1024
      Timeout: 900
      Code:
        S3Bucket: !Ref LambdaBucketName
        S3Key: !Ref LambdaPackage
      Role: !GetAtt LambdaBackEndRole.Arn
      TracingConfig:
        Mode: Active
      Environment:
        Variables:
          ENV_SOURCE_ACCOUNT: !Ref "AWS::AccountId"
          ENV_ACCOUNTS: !Ref Accounts
          ENV_SOURCE_REGION: !Ref "AWS::Region"
          ENV_REGIONS: !Ref Regions
          ENV_CROSS_ACCOUNT_ROLE: !Ref CrossAccountAccessRole
          ENV_SQSQUEUE: !Ref MyQueue
      Tags:
        -
          Key: Name
          Value: !Sub "${AWS::StackName}-SendFunction"

  LambdaReceiveSQSFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-ReceiveFunction"
      Handler: receive_sqs_message.lambda_handler
      Runtime: python3.7
      MemorySize: 1024
      Timeout: 900
      Code:
        S3Bucket: !Ref LambdaBucketName
        S3Key: !Ref LambdaPackage
      Role: !GetAtt LambdaBackEndRole.Arn
      TracingConfig:
        Mode: Active
      Environment:
        Variables:
          ENV_SOURCE_ACCOUNT: !Ref "AWS::AccountId"
          ENV_SOURCE_REGION: !Ref "AWS::Region"
          ENV_CROSS_ACCOUNT_ROLE: !Ref CrossAccountAccessRole
          ENV_TABLE_NAME_MULTI: !Ref TableName
          ENV_SQSQUEUE: !Ref MyQueue
      Tags:
        -
          Key: Name
          Value: !Sub "${AWS::StackName}-ReceiveFunction"

  LambdaListTableFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-ListTableFunction"
      Handler: list_table.lambda_handler
      Runtime: python3.7
      MemorySize: 1024
      Timeout: 900
      Code:
        S3Bucket: !Ref LambdaBucketName
        S3Key: !Ref LambdaPackage
      Role: !GetAtt LambdaBackEndRole.Arn
      TracingConfig:
        Mode: Active
      Environment:
        Variables:
          ENV_SOURCE_REGION: !Ref "AWS::Region"
          ENV_TABLE_NAME_MULTI: !Ref TableName
      Tags:
        -
          Key: Name
          Value: !Sub "${AWS::StackName}-ListTableFunction"

  # Logs Retention for Lambdas
  LogGroupSendFunction:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['/', ['/aws/lambda', !Ref LambdaSendSQSFunction]]
      RetentionInDays: !Ref LogRetention

  LogGroupReceiveFunction:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['/', ['/aws/lambda', !Ref LambdaReceiveSQSFunction]]
      RetentionInDays: !Ref LogRetention

  LogGroupListFunction:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['/', ['/aws/lambda', !Ref LambdaListTableFunction]]
      RetentionInDays: !Ref LogRetention

  # API Gateway Rest API
  MyRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub ${AWS::StackName}-api
      ApiKeySourceType: HEADER
      Description: "Api for AWS Multi Account Viewer"

  # Api Gateway Resources
  SearchResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt MyRestApi.RootResourceId
      RestApiId: !Ref MyRestApi
      PathPart: 'search'

  MessageResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt MyRestApi.RootResourceId
      RestApiId: !Ref MyRestApi
      PathPart: 'message'

  # Api Gateway Methods
  APIListTable:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      RestApiId: !Ref MyRestApi
      ResourceId: !Ref SearchResource
      AuthorizerId: !Ref Authorizer
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaListTableFunction.Arn}/invocations"
        IntegrationResponses:
          - ResponseTemplates:
              application/json: ""
            StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - ResponseModels: {"application/json": "Empty"}
          StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true

  APISendSQS:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      RestApiId: !Ref MyRestApi
      ResourceId: !Ref MessageResource
      AuthorizerId: !Ref Authorizer
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaSendSQSFunction.Arn}/invocations"
        IntegrationResponses:
          - ResponseTemplates:
              application/json: ""
            StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - ResponseModels: {"application/json": "Empty"}
          StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true

  # Api Gateway Method for options
  APIListTableOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref MyRestApi
      ResourceId: !Ref SearchResource
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        IntegrationHttpMethod: OPTIONS
        RequestTemplates:
          application/json: "{\"statusCode\": 200}"
        IntegrationResponses:
          - ResponseTemplates:
              application/json: ""
            StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - ResponseModels: {"application/json": "Empty"}
          StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  APISendSQSOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref MyRestApi
      ResourceId: !Ref MessageResource
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        IntegrationHttpMethod: OPTIONS
        RequestTemplates:
          application/json: "{\"statusCode\": 200}"
        IntegrationResponses:
          - ResponseTemplates:
              application/json: ""
            StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - ResponseModels: {"application/json": "Empty"}
          StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # API GateWay Authorizer
  Authorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Type: "COGNITO_USER_POOLS"
      IdentitySource: "method.request.header.Authorization"
      Name: !Sub ${AWS::StackName}CognitoAuthorizer
      RestApiId: !Ref MyRestApi
      ProviderARNs:
        - !Ref CognitoUserPoolArn

  # API Gateway Deployment
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref MyRestApi
      StageName: !Ref ApiGatewayStageName
    DependsOn:
      - APISendSQSOptions
      - APIListTableOptions
      - APISendSQS
      - APIListTable

  # API Gateway Stage
  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref MyRestApi
      StageName: !Ref ApiGatewayStageName
      DeploymentId: !Ref ApiGatewayDeployment
      TracingEnabled: true
    DependsOn:
      - APISendSQSOptions
      - APIListTableOptions
      - APISendSQS
      - APIListTable

  # Cron Rule to refresh dynamodb table
  ScheduledRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "ScheduledRule"
      ScheduleExpression: !Ref CronTimer
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt
            - "LambdaSendSQSFunction"
            - "Arn"
          Id: "TargetFunctionV1"
          Input: '{"queryStringParameters":{"function": "cron"}}'

  # Lambda Permission for Cron
  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "LambdaSendSQSFunction.Arn"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt "ScheduledRule.Arn"

  # Lambda Permissions API Gateway
  LambdaApiListTableGatewayInvoke:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "LambdaListTableFunction.Arn"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MyRestApi}/*/*"

  # Lambda Permissions API Gateway
  LambdaApiSendSQSGatewayInvoke:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "LambdaSendSQSFunction.Arn"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MyRestApi}/*/*"

Outputs:
  ApigEndpoint:
    Value: !Sub "https://${MyRestApi}.execute-api.${AWS::Region}.amazonaws.com/${ApiGatewayStageName}"
  SQSEndpoint:
    Value: !Ref MyQueue
